generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  address   String?
  googleId  String? @unique

  role Role @default(USER)

  refreshToken          String?
  refreshTokenExpiresAt DateTime?

  cart Cart?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]

  @@map("categories")
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Float
  stock         Int            @default(0)
  Category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?
  discount      Discount[]
  productImages ProductImage[]
  CartItem      CartItem[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("product_images")
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
}

model Order {
  id          String      @id @default(uuid())
  status      OrderStatus @default(PENDING)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Float
  promocodeId String?
  promocode   Promocode?  @relation(fields: [promocodeId], references: [id], onDelete: SetNull)

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  price     Float

  @@map("order_items")
}

model Promocode {
  id             String  @id @default(uuid())
  code           String  @unique
  value          Float
  minOrderAmount Float
  maxUsage       Int
  usedCount      Int     @default(0)
  isActive       Boolean @default(true)
  Order          Order[]
}

model Discount {
  id        String   @id @default(uuid())
  value     Float
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
